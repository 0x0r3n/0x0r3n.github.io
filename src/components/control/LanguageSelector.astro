---
import i18next from "i18next";
// @ts-ignore
import { localizePath } from "astro-i18next";
import ISO6991 from "iso-639-1";

interface languageMapping {
  [localeCode: string]: string;
}

export interface Props extends astroHTML.JSX.SelectHTMLAttributes {
  showFlag?: boolean;
  languageMapping?: languageMapping;
}

const supportedLanguages = i18next.languages;
const currentLanguage = i18next.language;

const { pathname } = Astro.url;

const { showFlag = false, languageMapping, ...attributes } = Astro.props;
---

<div class="language-selector">
  <button type="button" class="btn">
    <i class="iconfont ic-language icon"></i>
  </button>
  <div class="dropdown-wrapper">
    <ul class="dropdown dynamic-ele">
      {
        supportedLanguages.map((supportedLanguage: string) => {
          let value = localizePath(pathname, supportedLanguage);

          let nativeName = "";
          if (
            languageMapping &&
            languageMapping.hasOwnProperty(supportedLanguage)
          ) {
            nativeName = languageMapping[supportedLanguage];
          } else {
            nativeName = ISO6991.getNativeName(supportedLanguage);
          }

          return (
            <li class="selection language-selection" data-target={value}>
              {nativeName}
            </li>
          );
        })
      }
    </ul>
  </div>
</div>

<style>
  .language-selector {
    @apply relative;
  }

  .btn {
    @apply py-2 px-3 rounded-lg transition-all text-[var(--text-color)];
    @apply hover:bg-[var(--primary-color-hover)] hover:text-[var(--primary-color)];
  }

  .icon {
    @apply text-xl stroke-2;
  }

  .language-selector:hover .dropdown-wrapper,
  .dropdown-wrapper:hover .dropdown-wrapper {
    @apply block;
  }

  .dropdown-wrapper {
    @apply hidden absolute top-0 -left-1/2 w-32 h-48;
  }

  .dropdown {
    @apply absolute bottom-0 flex flex-col p-1 rounded-lg bg-[var(--card-color-transparent)] w-32;
    opacity: 0;
    animation: 300ms fade-in-down;
    animation-fill-mode: forwards;
  }

  .selection {
    @apply flex flex-row content-center items-center align-middle rounded-md p-2 pr-4 text-[(var(--text-color))] hover:bg-[var(--primary-color-hover)] hover:text-[var(--primary-color)] transition-all;
    font-family: var(--primary-font);
  }

  .selection::before {
    @apply w-1 mr-1 transition-all;
    @apply hover:mr-3;
    content: "";
  }

  @keyframes fade-in-down {
    0% {
      transform: translateY(1rem);
      opacity: 0;
    }

    100% {
      transform: translateY(0);
      opacity: 1;
    }
  }
</style>
